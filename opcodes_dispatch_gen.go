// Code generated by tools/gen_opcodes_dispatch.go; DO NOT EDIT.
package main

//nolint:lll // Keeping lines long for generated code clarity
var opcodesFunc = map[int]func(*CPU, *Instruction) int{
	0x00: OpNop, // NOP
	0x01: OpLdR16N16, // LD BC, n16
	0x02: OpLdMemBCA, // LD (BC), A
	// 0x03:               OpIncR16,        // INC BC
	0x04:               OpIncR8,         // INC B
	// 0x05:               OpDecR8,         // DEC B
	0x06:               OpLdR8N8,        // LD B, n8
	// 0x07:               OpRlca,          // RLCA
	// 0x08:               OpLdMemImm16SP,  // LD (a16), SP
	// 0x09:               OpAddHLR16,      // ADD HL, BC
	// 0x0A:               OpLdAMemBC,      // LD A, (BC)
	// 0x0B:               OpDecR16,        // DEC BC
	0x0C:               OpIncR8,         // INC C
	// 0x0D:               OpDecR8,         // DEC C
	0x0E:               OpLdR8N8,        // LD C, n8
	// 0x0F:               OpRrca,          // RRCA
	// 0x10:               OpStop,          // STOP n8
	0x11:               OpLdR16N16,      // LD DE, n16
	// 0x12:               OpLdMemDEA,      // LD (DE), A
	// 0x13:               OpIncR16,        // INC DE
	0x14:               OpIncR8,         // INC D
	// 0x15:               OpDecR8,         // DEC D
	0x16:               OpLdR8N8,        // LD D, n8
	0x17: OpRla, // RLA
	// 0x18: OpJrImm8,   // JR e8
	// 0x19: OpAddHLR16, // ADD HL, DE
	0x1A: OpLdAMemDE, // LD A, (DE)
	// 0x1B:               OpDecR16,        // DEC DE
	0x1C:               OpIncR8,         // INC E
	// 0x1D:               OpDecR8,         // DEC E
	0x1E:               OpLdR8N8,        // LD E, n8
	// 0x1F:               OpRra,           // RRA
	0x20:               OpJrCondImm8,    // JR NZ, e8
	0x21:               OpLdR16N16,      // LD HL, n16
	0x22:               OpLdMemHLR8,     // LD (HL++), A
	// 0x23:               OpIncR16,        // INC HL
	0x24:               OpIncR8,         // INC H
	// 0x25:               OpDecR8,         // DEC H
	0x26:               OpLdR8N8,        // LD H, n8
	// 0x27:               OpDaa,           // DAA
	// 0x28:               OpJrCondImm8,    // JR Z, e8
	// 0x29:               OpAddHLR16,      // ADD HL, HL
	// 0x2A:               OpLdR8MemHL,     // LD A, (HL++)
	// 0x2B:               OpDecR16,        // DEC HL
	0x2C:               OpIncR8,         // INC L
	// 0x2D:               OpDecR8,         // DEC L
	0x2E:               OpLdR8N8,        // LD L, n8
	// 0x2F:               OpCpl,           // CPL
	// 0x30:               OpJrCondImm8,    // JR NC, e8
	0x31:               OpLdR16N16,      // LD SP, n16
	0x32:               OpLdMemHLR8,     // LD (HL--), A
	// 0x33:               OpIncR16,        // INC SP
	// 0x34:               OpIncR16,        // INC (HL)
	// 0x35:               OpDecR16,        // DEC (HL)
	// 0x36:               OpLdMemHLN8,     // LD (HL), n8
	// 0x37:               OpScf,           // SCF
	// 0x38:               OpJrCondImm8,    // JR C, e8
	// 0x39:               OpAddHLR16,      // ADD HL, SP
	// 0x3A:               OpLdR8MemHL,     // LD A, (HL--)
	// 0x3B:               OpDecR16,        // DEC SP
	0x3C:               OpIncR8,         // INC A
	// 0x3D:               OpDecR8,         // DEC A
	0x3E:               OpLdR8N8,        // LD A, n8
	// 0x3F:               OpCcf,           // CCF
	0x40:               OpLdR8R8,        // LD B, B
	0x41:               OpLdR8R8,        // LD B, C
	0x42:               OpLdR8R8,        // LD B, D
	0x43:               OpLdR8R8,        // LD B, E
	0x44:               OpLdR8R8,        // LD B, H
	0x45:               OpLdR8R8,        // LD B, L
	// 0x46:               OpLdR8MemHL,     // LD B, (HL)
	0x47:               OpLdR8R8,        // LD B, A
	0x48:               OpLdR8R8,        // LD C, B
	0x49:               OpLdR8R8,        // LD C, C
	0x4A:               OpLdR8R8,        // LD C, D
	0x4B:               OpLdR8R8,        // LD C, E
	0x4C:               OpLdR8R8,        // LD C, H
	0x4D:               OpLdR8R8,        // LD C, L
	// 0x4E:               OpLdR8MemHL,     // LD C, (HL)
	0x4F:               OpLdR8R8,        // LD C, A
	0x50:               OpLdR8R8,        // LD D, B
	0x51:               OpLdR8R8,        // LD D, C
	0x52:               OpLdR8R8,        // LD D, D
	0x53:               OpLdR8R8,        // LD D, E
	0x54:               OpLdR8R8,        // LD D, H
	0x55:               OpLdR8R8,        // LD D, L
	// 0x56:               OpLdR8MemHL,     // LD D, (HL)
	0x57:               OpLdR8R8,        // LD D, A
	0x58:               OpLdR8R8,        // LD E, B
	0x59:               OpLdR8R8,        // LD E, C
	0x5A:               OpLdR8R8,        // LD E, D
	0x5B:               OpLdR8R8,        // LD E, E
	0x5C:               OpLdR8R8,        // LD E, H
	0x5D:               OpLdR8R8,        // LD E, L
	// 0x5E:               OpLdR8MemHL,     // LD E, (HL)
	0x5F:               OpLdR8R8,        // LD E, A
	0x60:               OpLdR8R8,        // LD H, B
	0x61:               OpLdR8R8,        // LD H, C
	0x62:               OpLdR8R8,        // LD H, D
	0x63:               OpLdR8R8,        // LD H, E
	0x64:               OpLdR8R8,        // LD H, H
	0x65:               OpLdR8R8,        // LD H, L
	// 0x66:               OpLdR8MemHL,     // LD H, (HL)
	0x67:               OpLdR8R8,        // LD H, A
	0x68:               OpLdR8R8,        // LD L, B
	0x69:               OpLdR8R8,        // LD L, C
	0x6A:               OpLdR8R8,        // LD L, D
	0x6B:               OpLdR8R8,        // LD L, E
	0x6C:               OpLdR8R8,        // LD L, H
	0x6D:               OpLdR8R8,        // LD L, L
	// 0x6E:               OpLdR8MemHL,     // LD L, (HL)
	0x6F:               OpLdR8R8,        // LD L, A
	0x70:               OpLdMemHLR8,     // LD (HL), B
	0x71:               OpLdMemHLR8,     // LD (HL), C
	0x72:               OpLdMemHLR8,     // LD (HL), D
	0x73:               OpLdMemHLR8,     // LD (HL), E
	0x74:               OpLdMemHLR8,     // LD (HL), H
	0x75:               OpLdMemHLR8,     // LD (HL), L
	// 0x76:               OpHalt,          // HALT
	0x77:               OpLdMemHLR8,     // LD (HL), A
	0x78:               OpLdR8R8,        // LD A, B
	0x79:               OpLdR8R8,        // LD A, C
	0x7A:               OpLdR8R8,        // LD A, D
	0x7B:               OpLdR8R8,        // LD A, E
	0x7C:               OpLdR8R8,        // LD A, H
	0x7D:               OpLdR8R8,        // LD A, L
	// 0x7E:               OpLdR8MemHL,     // LD A, (HL)
	0x7F:               OpLdR8R8,        // LD A, A
	// 0x80:               OpAddAR8,        // ADD A, B
	// 0x81:               OpAddAR8,        // ADD A, C
	// 0x82:               OpAddAR8,        // ADD A, D
	// 0x83:               OpAddAR8,        // ADD A, E
	// 0x84:               OpAddAR8,        // ADD A, H
	// 0x85:               OpAddAR8,        // ADD A, L
	// 0x86:               OpAddAMemHL,     // ADD A, (HL)
	// 0x87:               OpAddAR8,        // ADD A, A
	// 0x88:               OpAdcAR8,        // ADC A, B
	// 0x89:               OpAdcAR8,        // ADC A, C
	// 0x8A:               OpAdcAR8,        // ADC A, D
	// 0x8B:               OpAdcAR8,        // ADC A, E
	// 0x8C:               OpAdcAR8,        // ADC A, H
	// 0x8D:               OpAdcAR8,        // ADC A, L
	// 0x8E:               OpAdcAMemHL,     // ADC A, (HL)
	// 0x8F:               OpAdcAR8,        // ADC A, A
	// 0x90:               OpSubAR8,        // SUB A, B
	// 0x91:               OpSubAR8,        // SUB A, C
	// 0x92:               OpSubAR8,        // SUB A, D
	// 0x93:               OpSubAR8,        // SUB A, E
	// 0x94:               OpSubAR8,        // SUB A, H
	// 0x95:               OpSubAR8,        // SUB A, L
	// 0x96:               OpSubAMemHL,     // SUB A, (HL)
	// 0x97:               OpSubAR8,        // SUB A, A
	// 0x98:               OpSbcAR8,        // SBC A, B
	// 0x99:               OpSbcAR8,        // SBC A, C
	// 0x9A:               OpSbcAR8,        // SBC A, D
	// 0x9B:               OpSbcAR8,        // SBC A, E
	// 0x9C:               OpSbcAR8,        // SBC A, H
	// 0x9D:               OpSbcAR8,        // SBC A, L
	// 0x9E:               OpSbcAMemHL,     // SBC A, (HL)
	// 0x9F:               OpSbcAR8,        // SBC A, A
	// 0xA0:               OpAndAR8,        // AND A, B
	// 0xA1:               OpAndAR8,        // AND A, C
	// 0xA2:               OpAndAR8,        // AND A, D
	// 0xA3:               OpAndAR8,        // AND A, E
	// 0xA4:               OpAndAR8,        // AND A, H
	// 0xA5:               OpAndAR8,        // AND A, L
	// 0xA6:               OpAndAMemHL,     // AND A, (HL)
	// 0xA7:               OpAndAR8,        // AND A, A
	0xA8:               OpXorAR8,        // XOR A, B
	0xA9:               OpXorAR8,        // XOR A, C
	0xAA:               OpXorAR8,        // XOR A, D
	0xAB:               OpXorAR8,        // XOR A, E
	0xAC:               OpXorAR8,        // XOR A, H
	0xAD:               OpXorAR8,        // XOR A, L
	// 0xAE:               OpXorAMemHL,     // XOR A, (HL)
	0xAF:               OpXorAR8,        // XOR A, A
	// 0xB0:               OpOrAR8,         // OR A, B
	// 0xB1:               OpOrAR8,         // OR A, C
	// 0xB2:               OpOrAR8,         // OR A, D
	// 0xB3:               OpOrAR8,         // OR A, E
	// 0xB4:               OpOrAR8,         // OR A, H
	// 0xB5:               OpOrAR8,         // OR A, L
	// 0xB6:               OpOrAMemHL,      // OR A, (HL)
	// 0xB7:               OpOrAR8,         // OR A, A
	// 0xB8:               OpCpAR8,         // CP A, B
	// 0xB9:               OpCpAR8,         // CP A, C
	// 0xBA:               OpCpAR8,         // CP A, D
	// 0xBB:               OpCpAR8,         // CP A, E
	// 0xBC:               OpCpAR8,         // CP A, H
	// 0xBD:               OpCpAR8,         // CP A, L
	// 0xBE:               OpCpAMemHL,      // CP A, (HL)
	// 0xBF:               OpCpAR8,         // CP A, A
	// 0xC0:               OpRetCond,       // RET NZ
	0xC1:               OpPopR16,        // POP BC
	// 0xC2:               OpJpCondImm16,   // JP NZ, (a16)
	// 0xC3:               OpJpImm16,       // JP (a16)
	// 0xC4:               OpCallCondImm16, // CALL NZ, (a16)
	0xC5:               OpPushR16,       // PUSH BC
	// 0xC6:               OpAddAN8,        // ADD A, n8
	// 0xC7:               OpRstVec,        // RST $00
	// 0xC8:               OpRetCond,       // RET Z
	// 0xC9:               OpRet,           // RET
	// 0xCA:               OpJpCondImm16,   // JP Z, (a16)
	// 0xCC:               OpCallCondImm16, // CALL Z, (a16)
	0xCD:               OpCallImm16,     // CALL (a16)
	// 0xCE:               OpAdcAN8,        // ADC A, n8
	// 0xCF:               OpRstVec,        // RST $08
	// 0xD0:               OpRetCond,       // RET NC
	0xD1:               OpPopR16,        // POP DE
	// 0xD2:               OpJpCondImm16,   // JP NC, (a16)
	// 0xD4:               OpCallCondImm16, // CALL NC, (a16)
	0xD5:               OpPushR16,       // PUSH DE
	// 0xD6:               OpSubAN8,        // SUB A, n8
	// 0xD7:               OpRstVec,        // RST $10
	// 0xD8:               OpRetCond,       // RET C
	// 0xD9:               OpReti,          // RETI
	// 0xDA:               OpJpCondImm16,   // JP C, (a16)
	// 0xDC:               OpCallCondImm16, // CALL C, (a16)
	// 0xDE:               OpSbcAN8,        // SBC A, n8
	// 0xDF:               OpRstVec,        // RST $18
	0xE0:               OpLdhMemImm8A,   // LDH (a8), A
	0xE1:               OpPopR16,        // POP HL
	0xE2: OpLdhMemCA, // LDH (C), A
	0xE5:               OpPushR16,     // PUSH HL
	// 0xE6:               OpAndAN8,      // AND A, n8
	// 0xE7:               OpRstVec,      // RST $20
	// 0xE8:               OpAddSPE8,     // ADD SP, e8
	// 0xE9:               OpJpHL,        // JP HL
	// 0xEA:               OpLdMemImm16A, // LD (a16), A
	// 0xEE:               OpXorAN8,      // XOR A, n8
	// 0xEF:               OpRstVec,      // RST $28
	// 0xF0:               OpLdhAMemImm8, // LDH A, (a8)
	0xF1:               OpPopR16,      // POP AF
	// 0xF2:               OpLdhAMemC,    // LDH A, (C)
	// 0xF3:               OpDi,          // DI
	0xF5:               OpPushR16,     // PUSH AF
	// 0xF6:               OpOrAN8,       // OR A, n8
	// 0xF7:               OpRstVec,      // RST $30
	// 0xF8:               OpLdHLSPImm8,  // LD HL, SP++, e8
	// 0xF9:               OpLdSPHL,      // LD SP, HL
	// 0xFA:               OpLdAMemImm16, // LD A, (a16)
	// 0xFB:               OpEi,          // EI
	// 0xFE:               OpCpAN8,       // CP A, n8
	// 0xFF:               OpRstVec,      // RST $38
	// 256 /* CB 0x00 */ : OpCbRlcR8,     // RLC B
	// 257 /* CB 0x01 */ : OpCbRlcR8,     // RLC C
	// 258 /* CB 0x02 */ : OpCbRlcR8,     // RLC D
	// 259 /* CB 0x03 */ : OpCbRlcR8,     // RLC E
	// 260 /* CB 0x04 */ : OpCbRlcR8,     // RLC H
	// 261 /* CB 0x05 */ : OpCbRlcR8,     // RLC L
	// 262 /* CB 0x06 */ : OpCbRlcMemHL,  // RLC (HL)
	// 263 /* CB 0x07 */ : OpCbRlcR8,     // RLC A
	// 264 /* CB 0x08 */ : OpCbRrcR8,     // RRC B
	// 265 /* CB 0x09 */ : OpCbRrcR8,     // RRC C
	// 266 /* CB 0x0A */ : OpCbRrcR8,     // RRC D
	// 267 /* CB 0x0B */ : OpCbRrcR8,     // RRC E
	// 268 /* CB 0x0C */ : OpCbRrcR8,     // RRC H
	// 269 /* CB 0x0D */ : OpCbRrcR8,     // RRC L
	// 270 /* CB 0x0E */ : OpCbRrcMemHL,  // RRC (HL)
	// 271 /* CB 0x0F */ : OpCbRrcR8,     // RRC A
	272 /* CB 0x10 */ : OpCbRlR8,      // RL B
	273 /* CB 0x11 */ : OpCbRlR8,      // RL C
	274 /* CB 0x12 */ : OpCbRlR8,      // RL D
	275 /* CB 0x13 */ : OpCbRlR8,      // RL E
	276 /* CB 0x14 */ : OpCbRlR8,      // RL H
	277 /* CB 0x15 */ : OpCbRlR8,      // RL L
	// 278 /* CB 0x16 */ : OpCbRlMemHL,   // RL (HL)
	279 /* CB 0x17 */ : OpCbRlR8,      // RL A
	// 280 /* CB 0x18 */ : OpCbRrR8,      // RR B
	// 281 /* CB 0x19 */ : OpCbRrR8,      // RR C
	// 282 /* CB 0x1A */ : OpCbRrR8,      // RR D
	// 283 /* CB 0x1B */ : OpCbRrR8,      // RR E
	// 284 /* CB 0x1C */ : OpCbRrR8,      // RR H
	// 285 /* CB 0x1D */ : OpCbRrR8,      // RR L
	// 286 /* CB 0x1E */ : OpCbRrMemHL,   // RR (HL)
	// 287 /* CB 0x1F */ : OpCbRrR8,      // RR A
	// 288 /* CB 0x20 */ : OpCbSlaR8,     // SLA B
	// 289 /* CB 0x21 */ : OpCbSlaR8,     // SLA C
	// 290 /* CB 0x22 */ : OpCbSlaR8,     // SLA D
	// 291 /* CB 0x23 */ : OpCbSlaR8,     // SLA E
	// 292 /* CB 0x24 */ : OpCbSlaR8,     // SLA H
	// 293 /* CB 0x25 */ : OpCbSlaR8,     // SLA L
	// 294 /* CB 0x26 */ : OpCbSlaMemHL,  // SLA (HL)
	// 295 /* CB 0x27 */ : OpCbSlaR8,     // SLA A
	// 296 /* CB 0x28 */ : OpCbSraR8,     // SRA B
	// 297 /* CB 0x29 */ : OpCbSraR8,     // SRA C
	// 298 /* CB 0x2A */ : OpCbSraR8,     // SRA D
	// 299 /* CB 0x2B */ : OpCbSraR8,     // SRA E
	// 300 /* CB 0x2C */ : OpCbSraR8,     // SRA H
	// 301 /* CB 0x2D */ : OpCbSraR8,     // SRA L
	// 302 /* CB 0x2E */ : OpCbSraMemHL,  // SRA (HL)
	// 303 /* CB 0x2F */ : OpCbSraR8,     // SRA A
	// 304 /* CB 0x30 */ : OpCbSwapR8,    // SWAP B
	// 305 /* CB 0x31 */ : OpCbSwapR8,    // SWAP C
	// 306 /* CB 0x32 */ : OpCbSwapR8,    // SWAP D
	// 307 /* CB 0x33 */ : OpCbSwapR8,    // SWAP E
	// 308 /* CB 0x34 */ : OpCbSwapR8,    // SWAP H
	// 309 /* CB 0x35 */ : OpCbSwapR8,    // SWAP L
	// 310 /* CB 0x36 */ : OpCbSwapMemHL, // SWAP (HL)
	// 311 /* CB 0x37 */ : OpCbSwapR8,    // SWAP A
	// 312 /* CB 0x38 */ : OpCbSrlR8,     // SRL B
	// 313 /* CB 0x39 */ : OpCbSrlR8,     // SRL C
	// 314 /* CB 0x3A */ : OpCbSrlR8,     // SRL D
	// 315 /* CB 0x3B */ : OpCbSrlR8,     // SRL E
	// 316 /* CB 0x3C */ : OpCbSrlR8,     // SRL H
	// 317 /* CB 0x3D */ : OpCbSrlR8,     // SRL L
	// 318 /* CB 0x3E */ : OpCbSrlMemHL,  // SRL (HL)
	// 319 /* CB 0x3F */ : OpCbSrlR8,     // SRL A
	320 /* CB 0x40 */ : OpCbBitBR8,    // BIT 0, B
	321 /* CB 0x41 */ : OpCbBitBR8,    // BIT 0, C
	322 /* CB 0x42 */ : OpCbBitBR8,    // BIT 0, D
	323 /* CB 0x43 */ : OpCbBitBR8,    // BIT 0, E
	324 /* CB 0x44 */ : OpCbBitBR8,    // BIT 0, H
	325 /* CB 0x45 */ : OpCbBitBR8,    // BIT 0, L
	// 326 /* CB 0x46 */ : OpCbBitBMemHL, // BIT 0, (HL)
	327 /* CB 0x47 */ : OpCbBitBR8,    // BIT 0, A
	328 /* CB 0x48 */ : OpCbBitBR8,    // BIT 1, B
	329 /* CB 0x49 */ : OpCbBitBR8,    // BIT 1, C
	330 /* CB 0x4A */ : OpCbBitBR8,    // BIT 1, D
	331 /* CB 0x4B */ : OpCbBitBR8,    // BIT 1, E
	332 /* CB 0x4C */ : OpCbBitBR8,    // BIT 1, H
	333 /* CB 0x4D */ : OpCbBitBR8,    // BIT 1, L
	// 334 /* CB 0x4E */ : OpCbBitBMemHL, // BIT 1, (HL)
	335 /* CB 0x4F */ : OpCbBitBR8,    // BIT 1, A
	336 /* CB 0x50 */ : OpCbBitBR8,    // BIT 2, B
	337 /* CB 0x51 */ : OpCbBitBR8,    // BIT 2, C
	338 /* CB 0x52 */ : OpCbBitBR8,    // BIT 2, D
	339 /* CB 0x53 */ : OpCbBitBR8,    // BIT 2, E
	340 /* CB 0x54 */ : OpCbBitBR8,    // BIT 2, H
	341 /* CB 0x55 */ : OpCbBitBR8,    // BIT 2, L
	// 342 /* CB 0x56 */ : OpCbBitBMemHL, // BIT 2, (HL)
	343 /* CB 0x57 */ : OpCbBitBR8,    // BIT 2, A
	344 /* CB 0x58 */ : OpCbBitBR8,    // BIT 3, B
	345 /* CB 0x59 */ : OpCbBitBR8,    // BIT 3, C
	346 /* CB 0x5A */ : OpCbBitBR8,    // BIT 3, D
	347 /* CB 0x5B */ : OpCbBitBR8,    // BIT 3, E
	348 /* CB 0x5C */ : OpCbBitBR8,    // BIT 3, H
	349 /* CB 0x5D */ : OpCbBitBR8,    // BIT 3, L
	// 350 /* CB 0x5E */ : OpCbBitBMemHL, // BIT 3, (HL)
	351 /* CB 0x5F */ : OpCbBitBR8,    // BIT 3, A
	352 /* CB 0x60 */ : OpCbBitBR8,    // BIT 4, B
	353 /* CB 0x61 */ : OpCbBitBR8,    // BIT 4, C
	354 /* CB 0x62 */ : OpCbBitBR8,    // BIT 4, D
	355 /* CB 0x63 */ : OpCbBitBR8,    // BIT 4, E
	356 /* CB 0x64 */ : OpCbBitBR8,    // BIT 4, H
	357 /* CB 0x65 */ : OpCbBitBR8,    // BIT 4, L
	// 358 /* CB 0x66 */ : OpCbBitBMemHL, // BIT 4, (HL)
	359 /* CB 0x67 */ : OpCbBitBR8,    // BIT 4, A
	360 /* CB 0x68 */ : OpCbBitBR8,    // BIT 5, B
	361 /* CB 0x69 */ : OpCbBitBR8,    // BIT 5, C
	362 /* CB 0x6A */ : OpCbBitBR8,    // BIT 5, D
	363 /* CB 0x6B */ : OpCbBitBR8,    // BIT 5, E
	364 /* CB 0x6C */ : OpCbBitBR8,    // BIT 5, H
	365 /* CB 0x6D */ : OpCbBitBR8,    // BIT 5, L
	// 366 /* CB 0x6E */ : OpCbBitBMemHL, // BIT 5, (HL)
	367 /* CB 0x6F */ : OpCbBitBR8,    // BIT 5, A
	368 /* CB 0x70 */ : OpCbBitBR8,    // BIT 6, B
	369 /* CB 0x71 */ : OpCbBitBR8,    // BIT 6, C
	370 /* CB 0x72 */ : OpCbBitBR8,    // BIT 6, D
	371 /* CB 0x73 */ : OpCbBitBR8,    // BIT 6, E
	372 /* CB 0x74 */ : OpCbBitBR8,    // BIT 6, H
	373 /* CB 0x75 */ : OpCbBitBR8,    // BIT 6, L
	// 374 /* CB 0x76 */ : OpCbBitBMemHL, // BIT 6, (HL)
	375 /* CB 0x77 */ : OpCbBitBR8,    // BIT 6, A
	376 /* CB 0x78 */ : OpCbBitBR8,    // BIT 7, B
	377 /* CB 0x79 */ : OpCbBitBR8,    // BIT 7, C
	378 /* CB 0x7A */ : OpCbBitBR8,    // BIT 7, D
	379 /* CB 0x7B */ : OpCbBitBR8,    // BIT 7, E
	380 /* CB 0x7C */ : OpCbBitBR8,    // BIT 7, H
	381 /* CB 0x7D */ : OpCbBitBR8,    // BIT 7, L
	// 382 /* CB 0x7E */ : OpCbBitBMemHL, // BIT 7, (HL)
	383 /* CB 0x7F */ : OpCbBitBR8,    // BIT 7, A
	// 384 /* CB 0x80 */ : OpCbResBR8,    // RES 0, B
	// 385 /* CB 0x81 */ : OpCbResBR8,    // RES 0, C
	// 386 /* CB 0x82 */ : OpCbResBR8,    // RES 0, D
	// 387 /* CB 0x83 */ : OpCbResBR8,    // RES 0, E
	// 388 /* CB 0x84 */ : OpCbResBR8,    // RES 0, H
	// 389 /* CB 0x85 */ : OpCbResBR8,    // RES 0, L
	// 390 /* CB 0x86 */ : OpCbResBMemHL, // RES 0, (HL)
	// 391 /* CB 0x87 */ : OpCbResBR8,    // RES 0, A
	// 392 /* CB 0x88 */ : OpCbResBR8,    // RES 1, B
	// 393 /* CB 0x89 */ : OpCbResBR8,    // RES 1, C
	// 394 /* CB 0x8A */ : OpCbResBR8,    // RES 1, D
	// 395 /* CB 0x8B */ : OpCbResBR8,    // RES 1, E
	// 396 /* CB 0x8C */ : OpCbResBR8,    // RES 1, H
	// 397 /* CB 0x8D */ : OpCbResBR8,    // RES 1, L
	// 398 /* CB 0x8E */ : OpCbResBMemHL, // RES 1, (HL)
	// 399 /* CB 0x8F */ : OpCbResBR8,    // RES 1, A
	// 400 /* CB 0x90 */ : OpCbResBR8,    // RES 2, B
	// 401 /* CB 0x91 */ : OpCbResBR8,    // RES 2, C
	// 402 /* CB 0x92 */ : OpCbResBR8,    // RES 2, D
	// 403 /* CB 0x93 */ : OpCbResBR8,    // RES 2, E
	// 404 /* CB 0x94 */ : OpCbResBR8,    // RES 2, H
	// 405 /* CB 0x95 */ : OpCbResBR8,    // RES 2, L
	// 406 /* CB 0x96 */ : OpCbResBMemHL, // RES 2, (HL)
	// 407 /* CB 0x97 */ : OpCbResBR8,    // RES 2, A
	// 408 /* CB 0x98 */ : OpCbResBR8,    // RES 3, B
	// 409 /* CB 0x99 */ : OpCbResBR8,    // RES 3, C
	// 410 /* CB 0x9A */ : OpCbResBR8,    // RES 3, D
	// 411 /* CB 0x9B */ : OpCbResBR8,    // RES 3, E
	// 412 /* CB 0x9C */ : OpCbResBR8,    // RES 3, H
	// 413 /* CB 0x9D */ : OpCbResBR8,    // RES 3, L
	// 414 /* CB 0x9E */ : OpCbResBMemHL, // RES 3, (HL)
	// 415 /* CB 0x9F */ : OpCbResBR8,    // RES 3, A
	// 416 /* CB 0xA0 */ : OpCbResBR8,    // RES 4, B
	// 417 /* CB 0xA1 */ : OpCbResBR8,    // RES 4, C
	// 418 /* CB 0xA2 */ : OpCbResBR8,    // RES 4, D
	// 419 /* CB 0xA3 */ : OpCbResBR8,    // RES 4, E
	// 420 /* CB 0xA4 */ : OpCbResBR8,    // RES 4, H
	// 421 /* CB 0xA5 */ : OpCbResBR8,    // RES 4, L
	// 422 /* CB 0xA6 */ : OpCbResBMemHL, // RES 4, (HL)
	// 423 /* CB 0xA7 */ : OpCbResBR8,    // RES 4, A
	// 424 /* CB 0xA8 */ : OpCbResBR8,    // RES 5, B
	// 425 /* CB 0xA9 */ : OpCbResBR8,    // RES 5, C
	// 426 /* CB 0xAA */ : OpCbResBR8,    // RES 5, D
	// 427 /* CB 0xAB */ : OpCbResBR8,    // RES 5, E
	// 428 /* CB 0xAC */ : OpCbResBR8,    // RES 5, H
	// 429 /* CB 0xAD */ : OpCbResBR8,    // RES 5, L
	// 430 /* CB 0xAE */ : OpCbResBMemHL, // RES 5, (HL)
	// 431 /* CB 0xAF */ : OpCbResBR8,    // RES 5, A
	// 432 /* CB 0xB0 */ : OpCbResBR8,    // RES 6, B
	// 433 /* CB 0xB1 */ : OpCbResBR8,    // RES 6, C
	// 434 /* CB 0xB2 */ : OpCbResBR8,    // RES 6, D
	// 435 /* CB 0xB3 */ : OpCbResBR8,    // RES 6, E
	// 436 /* CB 0xB4 */ : OpCbResBR8,    // RES 6, H
	// 437 /* CB 0xB5 */ : OpCbResBR8,    // RES 6, L
	// 438 /* CB 0xB6 */ : OpCbResBMemHL, // RES 6, (HL)
	// 439 /* CB 0xB7 */ : OpCbResBR8,    // RES 6, A
	// 440 /* CB 0xB8 */ : OpCbResBR8,    // RES 7, B
	// 441 /* CB 0xB9 */ : OpCbResBR8,    // RES 7, C
	// 442 /* CB 0xBA */ : OpCbResBR8,    // RES 7, D
	// 443 /* CB 0xBB */ : OpCbResBR8,    // RES 7, E
	// 444 /* CB 0xBC */ : OpCbResBR8,    // RES 7, H
	// 445 /* CB 0xBD */ : OpCbResBR8,    // RES 7, L
	// 446 /* CB 0xBE */ : OpCbResBMemHL, // RES 7, (HL)
	// 447 /* CB 0xBF */ : OpCbResBR8,    // RES 7, A
	// 448 /* CB 0xC0 */ : OpCbSetBR8,    // SET 0, B
	// 449 /* CB 0xC1 */ : OpCbSetBR8,    // SET 0, C
	// 450 /* CB 0xC2 */ : OpCbSetBR8,    // SET 0, D
	// 451 /* CB 0xC3 */ : OpCbSetBR8,    // SET 0, E
	// 452 /* CB 0xC4 */ : OpCbSetBR8,    // SET 0, H
	// 453 /* CB 0xC5 */ : OpCbSetBR8,    // SET 0, L
	// 454 /* CB 0xC6 */ : OpCbSetBMemHL, // SET 0, (HL)
	// 455 /* CB 0xC7 */ : OpCbSetBR8,    // SET 0, A
	// 456 /* CB 0xC8 */ : OpCbSetBR8,    // SET 1, B
	// 457 /* CB 0xC9 */ : OpCbSetBR8,    // SET 1, C
	// 458 /* CB 0xCA */ : OpCbSetBR8,    // SET 1, D
	// 459 /* CB 0xCB */ : OpCbSetBR8,    // SET 1, E
	// 460 /* CB 0xCC */ : OpCbSetBR8,    // SET 1, H
	// 461 /* CB 0xCD */ : OpCbSetBR8,    // SET 1, L
	// 462 /* CB 0xCE */ : OpCbSetBMemHL, // SET 1, (HL)
	// 463 /* CB 0xCF */ : OpCbSetBR8,    // SET 1, A
	// 464 /* CB 0xD0 */ : OpCbSetBR8,    // SET 2, B
	// 465 /* CB 0xD1 */ : OpCbSetBR8,    // SET 2, C
	// 466 /* CB 0xD2 */ : OpCbSetBR8,    // SET 2, D
	// 467 /* CB 0xD3 */ : OpCbSetBR8,    // SET 2, E
	// 468 /* CB 0xD4 */ : OpCbSetBR8,    // SET 2, H
	// 469 /* CB 0xD5 */ : OpCbSetBR8,    // SET 2, L
	// 470 /* CB 0xD6 */ : OpCbSetBMemHL, // SET 2, (HL)
	// 471 /* CB 0xD7 */ : OpCbSetBR8,    // SET 2, A
	// 472 /* CB 0xD8 */ : OpCbSetBR8,    // SET 3, B
	// 473 /* CB 0xD9 */ : OpCbSetBR8,    // SET 3, C
	// 474 /* CB 0xDA */ : OpCbSetBR8,    // SET 3, D
	// 475 /* CB 0xDB */ : OpCbSetBR8,    // SET 3, E
	// 476 /* CB 0xDC */ : OpCbSetBR8,    // SET 3, H
	// 477 /* CB 0xDD */ : OpCbSetBR8,    // SET 3, L
	// 478 /* CB 0xDE */ : OpCbSetBMemHL, // SET 3, (HL)
	// 479 /* CB 0xDF */ : OpCbSetBR8,    // SET 3, A
	// 480 /* CB 0xE0 */ : OpCbSetBR8,    // SET 4, B
	// 481 /* CB 0xE1 */ : OpCbSetBR8,    // SET 4, C
	// 482 /* CB 0xE2 */ : OpCbSetBR8,    // SET 4, D
	// 483 /* CB 0xE3 */ : OpCbSetBR8,    // SET 4, E
	// 484 /* CB 0xE4 */ : OpCbSetBR8,    // SET 4, H
	// 485 /* CB 0xE5 */ : OpCbSetBR8,    // SET 4, L
	// 486 /* CB 0xE6 */ : OpCbSetBMemHL, // SET 4, (HL)
	// 487 /* CB 0xE7 */ : OpCbSetBR8,    // SET 4, A
	// 488 /* CB 0xE8 */ : OpCbSetBR8,    // SET 5, B
	// 489 /* CB 0xE9 */ : OpCbSetBR8,    // SET 5, C
	// 490 /* CB 0xEA */ : OpCbSetBR8,    // SET 5, D
	// 491 /* CB 0xEB */ : OpCbSetBR8,    // SET 5, E
	// 492 /* CB 0xEC */ : OpCbSetBR8,    // SET 5, H
	// 493 /* CB 0xED */ : OpCbSetBR8,    // SET 5, L
	// 494 /* CB 0xEE */ : OpCbSetBMemHL, // SET 5, (HL)
	// 495 /* CB 0xEF */ : OpCbSetBR8,    // SET 5, A
	// 496 /* CB 0xF0 */ : OpCbSetBR8,    // SET 6, B
	// 497 /* CB 0xF1 */ : OpCbSetBR8,    // SET 6, C
	// 498 /* CB 0xF2 */ : OpCbSetBR8,    // SET 6, D
	// 499 /* CB 0xF3 */ : OpCbSetBR8,    // SET 6, E
	// 500 /* CB 0xF4 */ : OpCbSetBR8,    // SET 6, H
	// 501 /* CB 0xF5 */ : OpCbSetBR8,    // SET 6, L
	// 502 /* CB 0xF6 */ : OpCbSetBMemHL, // SET 6, (HL)
	// 503 /* CB 0xF7 */ : OpCbSetBR8,    // SET 6, A
	// 504 /* CB 0xF8 */ : OpCbSetBR8,    // SET 7, B
	// 505 /* CB 0xF9 */ : OpCbSetBR8,    // SET 7, C
	// 506 /* CB 0xFA */ : OpCbSetBR8,    // SET 7, D
	// 507 /* CB 0xFB */ : OpCbSetBR8,    // SET 7, E
	// 508 /* CB 0xFC */ : OpCbSetBR8,    // SET 7, H
	// 509 /* CB 0xFD */ : OpCbSetBR8,    // SET 7, L
	// 510 /* CB 0xFE */ : OpCbSetBMemHL, // SET 7, (HL)
	// 511 /* CB 0xFF */ : OpCbSetBR8,    // SET 7, A
}
